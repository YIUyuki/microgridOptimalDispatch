from importFile import *
from pyomo.bilevel import *
from microgrid_Model import *
M = ConcreteModel()
M.x = Var(bounds=(0,None))
M.sub = SubModel()
M.sub.y = Var(bounds=(0,None))
M.sub.z = Var(bounds=(0,None))
M.sub.p = Var(bounds=(-10,10))
M.sub.o = Objective(expr=M.sub.y + M.sub.z)
M.sub.c1 = Constraint(expr=- M.x - M.sub.y + M.sub.p <= -3)
M.sub.c2 = Constraint(expr=-2*M.x + M.sub.y + M.sub.p<= 0)
M.sub.c3 = Constraint(expr= 2*M.x + M.sub.y + M.sub.p<= 12)
M.sub.c4 = Constraint(expr= 3*M.x - 2 *M.sub.y + M.sub.p<= 4)
M.sub1 = M.sub.clone()
M.sub1.c5 = Constraint(expr= 3*M.x - 2 *M.sub1.y + M.sub1.p + M.sub.p<= 4)
M.o = Objective(expr=M.x - 4*M.sub.y - 4*M.sub1.y )
xfrm = TransformationFactory('bilevel.linear_mpec')
M.sub1.p.fix()
xfrm.apply_to(M,options={'submodel':'sub'})
M.sub.p.fix()
xfrm.apply_to(M,options={'submodel':'sub1'})
xfrm = TransformationFactory('mpec.simple_disjunction')
xfrm.apply_to(M)
xfrm = TransformationFactory('gdp.bigm')
xfrm.apply_to(M, default_bigM=1000)
M.sub.p.fix(0)
M.sub1.p.fix(0)
solver = SolverFactory('gurobi')
res = solver.solve(M)
print(res)
